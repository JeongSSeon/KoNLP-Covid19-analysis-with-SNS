{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN7S4ZunX4qLxX7B/PFxbRe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"a3vW6JFKTU0w"},"source":["<유튜브 댓글 크롤링하기></br>\n","영상01: 병원으로 바로 가야하는 백신 부작용 증상</br>\n","[링크 텍스트](https://www.youtube.com/watch?v=PJGBX6nIIfI)\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XmmRK-KnTTRc","executionInfo":{"status":"ok","timestamp":1634359889621,"user_tz":-540,"elapsed":3406,"user":{"displayName":"팍쭁","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjnROjUcabo8hvj64fbj_5GMVdwixGYfHkXWXeR9w=s64","userId":"16519615850962707179"}},"outputId":"d08f11ea-b14e-43bd-898f-d1f7ff15b126"},"source":["pip install google-api-python-client"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.7/dist-packages (1.12.8)\n","Requirement already satisfied: six<2dev,>=1.13.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client) (1.15.0)\n","Requirement already satisfied: httplib2<1dev,>=0.15.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client) (0.17.4)\n","Requirement already satisfied: google-auth>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client) (1.35.0)\n","Requirement already satisfied: google-auth-httplib2>=0.0.3 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client) (0.0.4)\n","Requirement already satisfied: uritemplate<4dev,>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client) (3.0.1)\n","Requirement already satisfied: google-api-core<2dev,>=1.21.0 in /usr/local/lib/python3.7/dist-packages (from google-api-python-client) (1.26.3)\n","Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from google-api-core<2dev,>=1.21.0->google-api-python-client) (1.53.0)\n","Requirement already satisfied: requests<3.0.0dev,>=2.18.0 in /usr/local/lib/python3.7/dist-packages (from google-api-core<2dev,>=1.21.0->google-api-python-client) (2.23.0)\n","Requirement already satisfied: setuptools>=40.3.0 in /usr/local/lib/python3.7/dist-packages (from google-api-core<2dev,>=1.21.0->google-api-python-client) (57.4.0)\n","Requirement already satisfied: pytz in /usr/local/lib/python3.7/dist-packages (from google-api-core<2dev,>=1.21.0->google-api-python-client) (2018.9)\n","Requirement already satisfied: packaging>=14.3 in /usr/local/lib/python3.7/dist-packages (from google-api-core<2dev,>=1.21.0->google-api-python-client) (21.0)\n","Requirement already satisfied: protobuf>=3.12.0 in /usr/local/lib/python3.7/dist-packages (from google-api-core<2dev,>=1.21.0->google-api-python-client) (3.17.3)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth>=1.16.0->google-api-python-client) (0.2.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth>=1.16.0->google-api-python-client) (4.2.4)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth>=1.16.0->google-api-python-client) (4.7.2)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=14.3->google-api-core<2dev,>=1.21.0->google-api-python-client) (2.4.7)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=1.16.0->google-api-python-client) (0.4.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.21.0->google-api-python-client) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.21.0->google-api-python-client) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.21.0->google-api-python-client) (2021.5.30)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core<2dev,>=1.21.0->google-api-python-client) (3.0.4)\n"]}]},{"cell_type":"code","metadata":{"id":"FPX9ZsYdTwFL"},"source":["\t\n","import pandas\n","from googleapiclient.discovery import build"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C8b9TZqMUCQ_"},"source":["comments = list()\n","api_obj = build('youtube', 'v3', developerKey='AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM')\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId='PJGBX6nIIfI', maxResults=500).execute()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Migw23db9Ew"},"source":["while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId='PJGBX6nIIfI', pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":597},"id":"Rkz22bi9cQhF","executionInfo":{"status":"ok","timestamp":1633523143940,"user_tz":-540,"elapsed":587,"user":{"displayName":"팍쭁","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjnROjUcabo8hvj64fbj_5GMVdwixGYfHkXWXeR9w=s64","userId":"16519615850962707179"}},"outputId":"25f87304-df5e-40f8-9958-ec066405dd92"},"source":["\n","df = pandas.DataFrame(comments)\n","df.to_excel('result01.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>* 타인을 비방하거나 욕설, 비속어, 차별적 내용, 신체적 비하 등의 불쾌감을 줄 ...</td>\n","      <td>서울대병원tv</td>\n","      <td>2021-06-30T09:04:52Z</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1. 2021년 9월 현재...&lt;br&gt;2. 백신 접종 사망자 1,000명 근접.&lt;b...</td>\n","      <td>korean entertainer</td>\n","      <td>2021-09-17T17:38:11Z</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>백신에 대해서   정부가 시키는대로 접종만하는  일반의사들은  잘 몰라요  부작용에...</td>\n","      <td>강병수</td>\n","      <td>2021-09-05T01:37:32Z</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>무통보 삭제하세요 &lt;br&gt;&lt;br&gt;병원으로 즉시 달려가야 하는 경우가 생기는 걸 예방...</td>\n","      <td>mildstorm 2</td>\n","      <td>2021-09-02T13:44:56Z</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>감사합니다&lt;br&gt;의학의 진실을  알수는없겠죠  국민을 마루타로 생각하고 미리미리 준...</td>\n","      <td>바다오로라</td>\n","      <td>2021-08-20T01:25:49Z</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>726</th>\n","      <td>@llamagood kim 위에서 먼가 언급을 했겠죠.&lt;br&gt;압박을 줬다거나</td>\n","      <td>시베의 농촌 일기</td>\n","      <td>2021-08-14T02:37:53Z</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>727</th>\n","      <td>@시베의 농촌 일기 &lt;br&gt;아프다고 해도 &lt;br&gt;의사놈들은 영상 장비 찍고&lt;br&gt;돈...</td>\n","      <td>llamagood kim</td>\n","      <td>2021-08-13T02:15:23Z</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>728</th>\n","      <td>상급병원으로 가는게 맞는데 검사 시 이상 소견이 나와야 하죠.&lt;br&gt;&lt;br&gt;이상 소...</td>\n","      <td>시베의 농촌 일기</td>\n","      <td>2021-07-04T05:21:37Z</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>729</th>\n","      <td>감사합니다.  이런 걸 알아놔야 백신부작용에 빨리 대응할 수 있겠네요, 설명이 간결...</td>\n","      <td>최veri</td>\n","      <td>2021-06-30T13:25:13Z</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>730</th>\n","      <td>감사합니다.  이런 걸 알아놔야 백신부작용에 빨리 대응할 수 있겠네요, 설명이 간결...</td>\n","      <td>최veri</td>\n","      <td>2021-06-30T13:25:13Z</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>731 rows × 4 columns</p>\n","</div>"],"text/plain":["                                                     0  ...   3\n","0    * 타인을 비방하거나 욕설, 비속어, 차별적 내용, 신체적 비하 등의 불쾌감을 줄 ...  ...  22\n","1    1. 2021년 9월 현재...<br>2. 백신 접종 사망자 1,000명 근접.<b...  ...   1\n","2    백신에 대해서   정부가 시키는대로 접종만하는  일반의사들은  잘 몰라요  부작용에...  ...   0\n","3    무통보 삭제하세요 <br><br>병원으로 즉시 달려가야 하는 경우가 생기는 걸 예방...  ...   1\n","4    감사합니다<br>의학의 진실을  알수는없겠죠  국민을 마루타로 생각하고 미리미리 준...  ...   0\n","..                                                 ...  ...  ..\n","726         @llamagood kim 위에서 먼가 언급을 했겠죠.<br>압박을 줬다거나  ...   3\n","727  @시베의 농촌 일기 <br>아프다고 해도 <br>의사놈들은 영상 장비 찍고<br>돈...  ...   4\n","728  상급병원으로 가는게 맞는데 검사 시 이상 소견이 나와야 하죠.<br><br>이상 소...  ...   6\n","729  감사합니다.  이런 걸 알아놔야 백신부작용에 빨리 대응할 수 있겠네요, 설명이 간결...  ...   4\n","730  감사합니다.  이런 걸 알아놔야 백신부작용에 빨리 대응할 수 있겠네요, 설명이 간결...  ...   4\n","\n","[731 rows x 4 columns]"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"OCsDxG4ckS2D"},"source":["영상02: 화이자2차백신 | 70만명 조사결과 부작용 생긴 사람들의 공통점은 이렇습니다</br>\n","[링크 텍스트](https://www.youtube.com/watch?v=UEJEm5jsbL8&feature=youtu.be)"]},{"cell_type":"code","metadata":{"id":"fp7Us0f-kRCj"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'UEJEm5jsbL8'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result02.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KZjagIHom2us"},"source":["영상03: 화이자 백신접종 후에 몸살로 앓아누움 ㅜㅜ | 코로나 화이자 백신(2차) 솔직후기</br>\n","[링크 텍스트](https://www.youtube.com/watch?v=iN23csEIrrU)"]},{"cell_type":"code","metadata":{"id":"D5X2S-vEm1B7"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'iN23csEIrrU'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result03.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QWrvmI7rofN5"},"source":["영상04: 20대 화이자 2차 찐접종후기 !!+ 코로나백신Q&A | 화이자증상 , 화이자부작용, 백신접종</br>\n","[링크 텍스트](https://www.youtube.com/watch?v=7ayIRFQvIFk)"]},{"cell_type":"code","metadata":{"id":"9vr6bhlsoeOt"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = '7ayIRFQvIFk'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result04.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hNYnPrVFpmp3"},"source":["영상05: 간호사의 코로나19 아스트라제네카 백신 접종 후기</br>\n","[링크 텍스트](https://www.youtube.com/watch?v=0rd8m_23XNw)"]},{"cell_type":"code","metadata":{"id":"86cMk5Ekpfaj"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = '0rd8m_23XNw'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result05.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gljfJpZaq0e5"},"source":["영상06: 코로나19 백신 아스트라제네카 맞아야 하나? 말아야 하나? 현직의사들이 느낀 생생한 접종 후기</br>\n","[링크 텍스트](https://youtu.be/oidL9wsS_T0)"]},{"cell_type":"code","metadata":{"id":"jcGSfj0OqUb0"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'oidL9wsS_T0'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result06.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nGjqFkI-rk3u"},"source":["영상07: 코로나 백신 아스트라제네카 직접 맞아봤습니다 (백신 접종 3일차 후기)</br>\n","[링크 텍스트](https://youtu.be/-rDebAx88kM)"]},{"cell_type":"code","metadata":{"id":"YAW6rH4nriIv"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = '-rDebAx88kM'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result07.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YNWUaf8KuYt1"},"source":["영상08: 백신 얀센 접종 후기(24시간 동안 몸에 일어난 변화)ㅣ백신부작용ㅣ타이레놀ㅣ예비군ㅣ민방위ㅣ30대ㅣ40대ㅣ군인</br>\n","[링크 텍스트](https://www.youtube.com/watch?v=f8sxCJIfJwI)"]},{"cell_type":"code","metadata":{"id":"N7EglpEFuXau"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'f8sxCJIfJwI'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result08.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"00Sp_FD5vzKB"},"source":["영상09: 얀센 백신 접종 시작! 얀센 백신 궁금증 해결!</br>\n","[링크 텍스트](https://www.youtube.com/watch?v=_T45nLHsxE4)"]},{"cell_type":"code","metadata":{"id":"OygwnaYSvwj9"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = '_T45nLHsxE4'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result09.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mxXwi7AWwh-m"},"source":["영상10: 20대 코로나 백신 '모더나' 2차 접종 리얼 후기_가톨릭대학교 인천성모병원</br>\n","[링크 텍스트](https://www.youtube.com/watch?v=SFj6hW9Duv0)"]},{"cell_type":"code","metadata":{"id":"75yE5QVEwguC"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'SFj6hW9Duv0'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result10.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"c3hUNUUoxIpR"},"source":["\n","\n","영상11: 20대 간호사들의 코로나 백신 '모더나' 1차 접종 리얼 후기_가톨릭대학교 인천성모병원</br>\n","[링크 텍스트](https://www.youtube.com/watch?v=A7hVP3MM3oI)"]},{"cell_type":"code","metadata":{"id":"DRjyJ5hCxHjF"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'A7hVP3MM3oI'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result11.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o3C2oHe2KOug"},"source":["영상12: [백신효과 높이는 방법] 코로나19 백신 접종후 이것 3가지는 절대로 하지 마세요. 백신효과 높이는 방법.</br>\n","[링크 텍스트](https://www.youtube.com/watch?v=KmPURxjHyo4)"]},{"cell_type":"code","metadata":{"id":"cVsMG0fewv3m"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'KmPURxjHyo4'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result12.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ojbb2yskzNir"},"source":["영상13\n","https://www.youtube.com/watch?v=9H82grv5vtQ"]},{"cell_type":"code","metadata":{"id":"n_GcIGINKiZV"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = '9H82grv5vtQ'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result13.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A-ZVbaEQzdzl"},"source":["영상14 (심근염)\n","https://www.youtube.com/watch?v=BmMmBP5vWho"]},{"cell_type":"code","metadata":{"id":"mUaMkIsb1Tnk"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'BmMmBP5vWho'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result14.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VcuHn5sD49Uw"},"source":["영상15\n","https://www.youtube.com/watch?v=J3s3fa_wNNk"]},{"cell_type":"code","metadata":{"id":"UEFNt7-q4_oJ"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'J3s3fa_wNNk'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result15.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r9ElnLLHYXP-"},"source":["영상16 https://www.youtube.com/watch?v=ub0Y-SjICGA\n"]},{"cell_type":"code","metadata":{"id":"nv_tb_mkb-_9"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'ub0Y-SjICGA'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result16.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Un0v0ChaiTro"},"source":["영상17\n","https://www.youtube.com/watch?v=K_S8OHMaFmo"]},{"cell_type":"code","metadata":{"id":"Cq7NrZfBiWfs"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'K_S8OHMaFmo'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result17.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nWfH9gPCrvZQ"},"source":["영상 18\n","https://www.youtube.com/watch?v=TLsVCRk6x3M"]},{"cell_type":"code","metadata":{"id":"PwtvHveZrzoS"},"source":["api_key = 'AIzaSyACzBwRGvs0ij5ddtW5E5nf9D_ofq8CSbM'\n","video_id = 'TLsVCRk6x3M'\n"," \n","comments = list()\n","api_obj = build('youtube', 'v3', developerKey=api_key)\n","response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, maxResults=500).execute()\n"," \n","while response:\n","    for item in response['items']:\n","        comment = item['snippet']['topLevelComment']['snippet']\n","        comments.append([comment['textDisplay'], comment['authorDisplayName'], comment['publishedAt'], comment['likeCount']])\n"," \n","        if item['snippet']['totalReplyCount'] > 0:\n","            for reply_item in item['replies']['comments']:\n","                reply = reply_item['snippet']\n","                comments.append([reply['textDisplay'], reply['authorDisplayName'], reply['publishedAt'], reply['likeCount']])\n"," \n","    if 'nextPageToken' in response:\n","        response = api_obj.commentThreads().list(part='snippet,replies', videoId=video_id, pageToken=response['nextPageToken'], maxResults=500).execute()\n","    else:\n","        break\n"," \n","df = pandas.DataFrame(comments)\n","df.to_excel('result18.xlsx', header=['comment', 'author', 'date', 'num_likes'], index=None)"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!git add .\n","!git commit -m \"Connect Google Colab and Drive\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4VnfwXv7JVse","executionInfo":{"status":"ok","timestamp":1672724486557,"user_tz":-540,"elapsed":396,"user":{"displayName":"팍쭁","userId":"16519615850962707179"}},"outputId":"7fc40e29-2df9-463c-a99c-eddf80b5c0da"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["fatal: not a git repository (or any of the parent directories): .git\n","fatal: not a git repository (or any of the parent directories): .git\n"]}]}]}